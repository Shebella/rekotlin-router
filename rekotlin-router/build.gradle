apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.dokka-android'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'

group 'org.rekotlin-router'
version '0.2.0'

def siteUrl = 'https://github.com/ReKotlin/rekotlin-router'      // Homepage URL of the library
def gitUrl = 'https://github.com/ReKotlin/rekotlin-router.git'   // Git repository URL // Maven Group ID for the artifact

ext {
    bintrayRepo = 'rekotlin-router'
    bintrayName = 'rekotlin-router'

    publishedGroupId = 'org.rekotlinrouter'
    libraryName = 'rekotlin-router'
    artifact = 'rekotlin-router'
    artifactName = 'org.rekotlinrouter:rekotlin-router'

    libraryDescription = 'A declarative router for ReKotlin. Allows developers to declare routes in a similar manner as URLs are used on the web.'

    developerId = 'developerId'
    developerName = 'Mohanraj K.M.'
    developerEmail = 'kmmraj@gmail.com'

    licenseName = 'MIT'
    licenseUrl = 'https://tldrlegal.com/license/mit-license'
    allLicenses = ["MIT"]
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "0.2.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        debug {
            //TODO: Keep it false until..
            // https://stackoverflow.com/questions/39195754/java-lang-noclassdeffounderror-failed-resolution-of-lorg-jacoco-agent-rt-inter
            testCoverageEnabled = false
        }
        release {
            minifyEnabled false
            testCoverageEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation "androidx.appcompat:appcompat:$androidx_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compileOnly "org.rekotlin:rekotlin:$rekotlin_version"

    testImplementation "org.rekotlin:rekotlin:$rekotlin_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_core_version"
    testImplementation "org.amshove.kluent:kluent-android:${kluent_version}"
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    inputs.dir 'src/main/java'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    user = System.getenv("bintrayUser")
    key = System.getenv("bintrayApiKey")
    publications = ['rekotlinRouter']
    pkg {
        repo = libraryName
        name = libraryName
        userOrg = 'rekotlin'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = [licenseName]
        publish = true
        version {
            name = android.defaultConfig.versionName
            desc = libraryDescription
            released = new Date()
        }
    }
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

publishing {
    publications {
        rekotlinRouter(MavenPublication) {
            groupId group
            artifactId 'rekotlin-router'
            version android.defaultConfig.versionName
            artifact(sourcesJar)
            artifact("$buildDir/outputs/aar/rekotlin-router-release.aar")
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.api.allDependencies.each { dependency ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dependency.group)
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version', dependency.version)
                }
            }
        }
    }
}
